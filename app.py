import os
import subprocess
import pandas as pd
from flask import Flask, jsonify, render_template

app = Flask(__name__)

# Absolute path to the CSV file generated by your Python script
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CSV_FILE_PATH = os.path.join(BASE_DIR, "script", "affected_assets_with_versions.csv")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/run_script', methods=['POST'])
def run_script():
    try:
        script_path = os.path.join(BASE_DIR, "script", "zeus.py")
        result = subprocess.run(["python", script_path], capture_output=True, text=True, check=True)

        if not os.path.exists(CSV_FILE_PATH):
            return jsonify({'error': 'CSV file not generated'}), 500

        df = pd.read_csv(CSV_FILE_PATH)

        # KPIs
        total_assets = 500
        affected_assets = len(df['Asset Name'].unique())
        affected_percentage = round((affected_assets / total_assets) * 100, 2)

        # Bar chart: Count of CVE IDs grouped by Published Date
        cve_data = df.groupby('Published Date').size().reset_index(name='CVE Count')

        # Line chart: Count of CVE IDs grouped by EPSS Percentile
        epss_data = df.groupby('EPSS Percentile').size().reset_index(name='CVE Count')

        # Table: Top 10 Assets by Highest EPSS Percentile
        top_10_epss_assets = df[['Asset Name', 'EPSS Percentile']].dropna().sort_values(by='EPSS Percentile', ascending=False).head(10)

        result = {
            'total_assets': total_assets,
            'affected_assets': affected_assets,
            'affected_percentage': affected_percentage,
            'cve_data': cve_data.to_dict(orient='records'),  # For bar chart
            'epss_data': epss_data.to_dict(orient='records'),  # For line chart
            'top_10_epss_assets': top_10_epss_assets.to_dict(orient='records')  # For the table
        }

        # print("Result Data:", result)
        return jsonify(result)

    except subprocess.CalledProcessError as e:
        return jsonify({'error': f'Error running script: {e.stderr}'}), 500
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    
    app.run(debug=True)
